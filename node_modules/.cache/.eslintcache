[{"/Volumes/Macintosh HD - 数据/privateTest/private/src/index.js":"1","/Volumes/Macintosh HD - 数据/privateTest/private/src/App.js":"2","/Volumes/Macintosh HD - 数据/privateTest/private/src/reportWebVitals.js":"3","/Volumes/Macintosh HD - 数据/privateTest/private/src/component/nav.js":"4","/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/statePage.js":"5","/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/refsPage.js":"6","/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/propsPage.js":"7","/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/unControlPage.js":"8","/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/controlPage.js":"9","/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/lifeCyclePage.js":"10"},{"size":546,"mtime":1622787502847,"results":"11","hashOfConfig":"12"},{"size":5195,"mtime":1622776539000,"results":"13","hashOfConfig":"12"},{"size":390,"mtime":1622787552308,"results":"14","hashOfConfig":"12"},{"size":243,"mtime":1622710813633,"results":"15","hashOfConfig":"12"},{"size":610,"mtime":1622715607241,"results":"16","hashOfConfig":"12"},{"size":3344,"mtime":1622716202877,"results":"17","hashOfConfig":"12"},{"size":1911,"mtime":1622715592983,"results":"18","hashOfConfig":"12"},{"size":1036,"mtime":1622719775013,"results":"19","hashOfConfig":"12"},{"size":2696,"mtime":1622722747595,"results":"20","hashOfConfig":"12"},{"size":3511,"mtime":1622784443864,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jupovd",{"filePath":"24","messages":"25","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"27"},"/Volumes/Macintosh HD - 数据/privateTest/private/src/index.js",[],"/Volumes/Macintosh HD - 数据/privateTest/private/src/App.js",["49","50","51","52","53","54","55"],"import './App.css'\nimport React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  NavLink,\n  Route,\n  Link\n} from 'react-router-dom'\nimport { Redirect } from 'react-router'\nimport RefsPage from './pages/refsPage'\nimport StatePage from './pages/statePage'\nimport PropsPage from './pages/propsPage'\nimport UnControlPage from './pages/unControlPage'\nimport ControlPage from './pages/controlPage'\nimport LifeCycle from './pages/lifeCyclePage'\nimport { Button } from 'antd'\nimport 'antd/dist/antd.css'\nimport './assets/less/message.less'\n\nimport Nav from './component/nav'\n\n// function clickfun(){\n// // 其中this为undefined,可以定义全局that为类的构造器this\n//   console.log(that.state.ishot)\n// }\n\n{\n  /* Link组件，只改变url */\n}\n// 简单组件\nfunction App () {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        {/* <Button type=\"primary\">Button</Button> */}\n        <Router>\n          {/* 静态li路由导航 */}\n          {/* （1）Link 静态导航标签 没有样式*/}\n          <Link to='/lifeCycle'>我的</Link>\n          {/* link隐形传递参数 */}{' '}\n          <Link\n            to={{\n              pathname: '/statePage',\n              search: '?username=name',\n              hash: '#the-hash',\n              state: {\n                fromDashboard: true,\n                flag: 'wd'\n              } // 隐藏属性 可以传递隐蔽的东西\n            }}\n          >\n            状态\n          </Link>\n          {/* （2）NavLink 选中添加样式 */}\n          <NavLink\n            to='/refsPage'\n            activeClassName='selected'\n            activeStyle={{\n              color: 'red'\n            }}\n          >\n            ref\n          </NavLink>\n          {/* url 中拼写地址 */} {/* render传值 */}\n          <Route\n            path='/statePage'\n            exact\n            render={() => {\n              // return 你要显示的视图\n              return <h1> 瑶瑶加油 </h1>\n              //  return <IndexPage shop={shop} setShop={setShop}/>\n            }}\n          />\n          <Route path='/statePage' exact component={StatePage} />\n          <Route path='/refsPage' exact component={RefsPage} />\n          <Route path='/lifeCycle' exact component={LifeCycle} />\n          {/* 重定向： <Redirect from=\"messages/:id\" to=\"/messages/:id\" /> */}\n        </Router>\n      </header>\n    </div>\n  )\n}\n\n// 复杂组件 复杂的调用方式，简化版查看statePage\nlet that\n\nclass ClassCom extends React.Component {\n  //构造器调用一次\n  constructor (props) {\n    //构造器是否接受props，是否传递props，取决于是否希望在构造器中通过this访问props\n    super(props)\n\n    this.state = {\n      ishot: true,\n      name: 'yaoyao'\n    } //（通过this.state初始化实力对象）\n    // that=this;\n    this.changeHot = this.changeHot.bind(this) //将更改this，并给自身增加一个changeHot方法(为事件处理函数绑定实例)\n    // this.demo=this.changeHot.bind(this);//将更改this，\n  }\n\n  //点几次调用几次\n  changeHot () {\n    //这里指的this为undefined，因为类中的方法默认开启严格模式\n    // changeHot是作为onclick的回调，所以不是通过实例调用的，是直接调用\n    // changeHot放在ClassCom的原型对象上，供实例调用\n    console.log(this.state.ishot)\n\n    // this.state.ishot=!this.state.ishot;！！！状态state不可直接更改，需要使用setState\n    const ishot = this.state.ishot //更新为合并不是替换\n    this.setState({\n      ishot: !ishot\n    })\n  }\n\n  // render调用1+n次，1是初始化，N是状态更新的次数\n  render () {\n    console.log(this)\n    const { ishot, name } = this.state\n    const msg = {\n      title: 'topic',\n      content: 'this is a piece of information',\n      time: 2019\n    }\n\n    return (\n      <div>\n        <h1>组件的三大属性--state</h1>\n        <p>\n          直接用this.state中的值： {this.state.name}\n          {this.state.ishot ? 'hh' : 'xx'}\n        </p>\n        <p>\n          先定义再用this.state的值： {name}: {ishot ? 'hh' : 'xx'}\n        </p>\n        {/* <h1 onClick={clickfun} className=\"h1Sty\"> 实例的方法，定义全局that调用</h1> */}\n        <p onClick={this.changeHot}> 实例的方法 </p>\n        {/* <h1 onClick={this.demo()}>实例的方法</h1> */}\n        {/* 直接引用某组件 */} <StatePage />\n        <hr></hr>\n        <h1>组件的三大属性---props</h1>\n        {/* 引用自组件，并通过父组件props传参 */} {/* (1)...复制对象 可批量*/}\n        <PropsPage {...msg} />\n        {/* （2）传递单个对象 */}\n        <PropsPage title='甲' content='内容，不传时间设置默认值' />\n        <PropsPage title='乙' content='内容' time={2019} />\n        <hr></hr>\n        <h1>组件的三大属性--refs</h1>\n        {/* ref */}\n        <RefsPage />\n        <hr></hr>\n        <h1>非受控组件和受控组件</h1>\n        <p>非受控组件</p>\n        <UnControlPage />\n        <p>受控组件（推荐）：将数组保存到状态中</p>\n        <ControlPage />\n      </div>\n    )\n  }\n}\n// export default ClassCom\nexport default App\n",["56","57"],"/Volumes/Macintosh HD - 数据/privateTest/private/src/reportWebVitals.js",[],"/Volumes/Macintosh HD - 数据/privateTest/private/src/component/nav.js",["58","59","60"],"import react from 'react';\nimport Link from 'react-router-dom'\nimport reactDom from 'react-dom';\nexport default function nav(){\n    return (\n        <nav>\n            <link to=\"/refsPage\">注册</link><span>｜</span>\n        </nav>\n    );\n}\n\n","/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/statePage.js",["61"],"import React, {\n    Component\n} from \"react\";\n// import { Menu, Dropdown, Button } from 'antd';\n// 复杂组件 相比app.js简化写法\nclass StatePage extends Component {\n    // 初始化状态\n    state = {\n        name: \"yaoyao\",\n        age: 20\n    }\n    changeAge = () => {\n        let age=this.state.age;\n        this.setState({\n            age:30\n        })\n    }\n    render() {\n        return (\n        <div>\n            <p > {this.state.name}:{this.state.age} </p>\n            <button onClick={this.changeAge}>    点击修改年龄</button>\n        </div>\n        )\n    }\n}\nexport default StatePage;","/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/refsPage.js",["62"],"import React, { Component } from 'react'\n\n// ref 16.8 以前的书写版本不建议使用\n\n// class RefsPage extends Component{\n//     // 最简单的refs写法，16.8版本，不推荐使用\n//     showData =()=>{\n//         console.log(this.refs.inputInfo);\n\n//         const {inputInfo}=this.refs;\n//         console.log(inputInfo.value)\n\n//     }\n//     showData2=()=>{\n//         const {outputInfo} =this.refs;\n//         console.log(outputInfo.value)\n//     }\n\n//     render(){\n//         return (<div>\n//             <input ref=\"inputInfo\" type=\"text\" placeholder=\"点击按照展示输入信息\"></input>\n//             <button onClick={this.showData}>展示</button>\n//             <input ref=\"outputInfo\" onBlur={this.showData2} type=\"text\" placeholder=\"点失去焦点展示信息\"></input>\n//         </div>)\n//     }\n// }\n\n// ref使用   ---不要过度使用ref \nclass RefsPage extends React.Component {\n  showData = () => {\n    console.log(this.inputInfo.value)\n  }\n  showData2 = () => {\n    const { outputInfo } = this\n    console.log(outputInfo.value)\n  }\n  showData3 = currentNode => {\n    this.putInfo = currentNode\n    console.log(currentNode)\n  }\n\n  // 最为推荐】使用容器，缺点：要创建很多容器，因为每个容器专人专用\n  refbox = React.createRef()\n  refbox2 = React.createRef()\n  showData4 = () => {\n    console.log(this.refbox.current.value)\n  }\n  showData5 = () => {\n    console.log(this.refbox2.current.value)\n  }\n  showData6 = event => {\n    // evevent.preventDefault();//阻止表单提交\n    console.log(event.target.value)\n  }\n  render () {\n    return (\n      <div>\n        {/* 回调函数最基础的定义就是你定义了一个函数，但是你没有调用，被别人使用 */}\n        {/* 内联函数拿到当前的节点 */}\n\n        <input\n          ref={currentNode => {\n            console.log(currentNode) //回调函数是谁调用就是谁\n            this.inputInfo = currentNode\n          }}\n          type='text'\n          placeholder='点击按钮打印输入的信息'\n        ></input>\n        <button onClick={this.showData}>点击显示</button>\n\n        <br />\n        <input\n          onBlur={this.showData2}\n          ref={currentNode => {\n            //内联函数更新过程中会执行两次，一次清空，一次设置新的\n            this.outputInfo = currentNode\n          }}\n          type='text'\n          placeholder='失去焦点打印输入信息'\n        ></input>\n\n        {/* 内联函数的改进（类的绑定形式） 不大影响，但是写法简便 ,无关紧要*/}\n        <input\n          ref={this.showData3}\n          type='text'\n          placeholder='点击展示输入信息，区别于内联函数会执行两次'\n        ></input>\n\n        <br />\n        {/* 最推荐的ref书写形式---容器 */}\n        <input ref={this.refbox} placeholder='容器--点击打印'></input>\n        <button onClick={this.showData4}>点击展示</button>\n\n        <input\n          ref={this.refbox2}\n          onBlur={this.showData5}\n          placeholder='容器--失去聚焦打印'\n        ></input>\n\n        {/* 容器省略ref ---发生事件的元素是你要操作的元素 上面的进阶*/}\n        <input onBlur={this.showData6} placeholder='容器--失去聚焦打印'></input>\n      </div>\n    )\n  }\n}\nexport default RefsPage\n","/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/propsPage.js",["63"],"import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// 函数式组件\n//    --- 接受传值\n//    --- 只能用props\n// export default function PropsPage(props){\n//     const {title,content} = props;//父组件传过来的参数\n//     return (\n//        <div>\n//            <h1>{title}:{content}</h1>\n//        </div>\n//     );\n// }\n\n// 类式组件\n//     --- 接受传值\nclass PropsPage extends React.Component {\n  // 构造器可以省略\n  constructor (props) {\n    console.log(props)\n    super(props)\n  }\n  //规定props传值要求,这里的写法需要先引入npm install --save prop-types和import PropTypes from 'prop-types'\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    content: PropTypes.string,\n    time: PropTypes.number\n  }\n  //设置默认props传值\n  static defaultProps = {\n    time: 2010\n  }\n\n  render () {\n    const { title, content, time } = this.props\n    // pros只读。错例this.props.title=\"jhh\";\n    return (\n      <div>\n        <p>\n          {title}: {content}: {time}\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default PropsPage\n\n// // (1)函数式组件 (简单组件)\n// function FunCom (){\n//     // 注意这里的this是undefined,因为Babel强制\n//     return <h1>这是函数定义的组件，函数首字母必须大写，因为会去寻找，如果是大写认定为组件，如果是小写认为是html的标签没有找到就会报错</h1>\n// }\n// ReactDom.render(<FunCom/>,document.getElementById(\"??\"))\n\n// // (2)类式组件（复杂组件：包含状态）\n// class ClassCom extends React.Component{\n//     render(){\n//         //render放在类（ClassCom）的原型对象上,供实例使用\n//         // render的this是ClassCom的实例对象\n//         return <h1>这是类定义的组件，适合用于复杂组件的定义</h1>\n//     }\n// }\n// ReactDOM.render(<ClassCom/>,document.getElementById(\"?\"))\n","/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/unControlPage.js",[],"/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/controlPage.js",[],"/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/lifeCyclePage.js",["64","65","66"],"import React from 'react'\nclass LifeCycle extends React.Component {\n  // 构造器可以不写\n  //   constructor (props) {\n  //     super(props)\n  //     this.state = {\n  //       title: 'hello'\n  //     }\n  //   }\n  state = {\n    title: 'hello'\n  }\n  showData = event => {\n    this.setState({\n      title: event.target.value\n    })\n  }\n  render () {\n    const { title } = this.state\n    return (\n      <div>\n        <input\n          placeholder='失去聚焦在p标签显示信息'\n          onBlur={this.showData}\n        ></input>{' '}\n        <p>: {title} </p>{' '}\n      </div>\n    )\n  }\n}\n//最重要的是三个：render（初始化渲染）、componentDidMount（挂载完成）、componentWillUnmount（即将卸载）\n// 父组件\nclass A extends React.Component {\n  state = {\n    fatherName: 'father'\n  }\n  transChange = () => {\n    const { fatherName } = this.state\n    this.setState({\n      fatherName: 'newName'\n    })\n  }\n  //不更新状态下强制修改\n  forceChange = () => {\n    this.forceUpdate()\n  }\n  //组件将要挂载\n  componentWillMount () {\n    console.log('A---UNSAFE_componentWillMount')\n  }\n  //组件将要卸载\n  componentWillUnmount () {\n    console.log('A---componentWillUnmount ---import')\n    //这里可以做收尾工作。如：清空定时器、取消订阅消息等\n  }\n  // 是否修改：控制组件更新的阀门\n  shouldComponentUpdate () {\n    console.log('A---shouldComponentUpdate')\n    return false //这里默认为true，如果自行修改一定要返回一个boolean值判断是否接着执行。true：接着执行；false：不执行（此时可以考虑强制执行）\n    //这里一般为修改里state\n  }\n\n  //强制更新\n  componentWillUpdate () {\n    console.log('A---componentWillUpdate')\n  }\n  //   组件更新完毕 （如果传props和state的话是最新渲染之前的即是之前的prop和state值，再传一个snapshotu快照）\n  componentDidUpdate (preProps, prestate, snapShot) {\n    console.log('A---componentDidUpdate')\n  }\n  //   挂载完成\n  componentDidMount () {\n    console.log('A---componentDidMount   ---import')\n    //这里做初始化工作：如：发送网络请求、做定时器、订阅消息等\n  }\n  // 若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps\n  // static getDerivedStateFromProps (props, state) {\n  //   console.log(props, state)\n  //   return null\n  // }\n  // // 在更新之前获取快照\n  // getSnapshotBeforeUpdate () {\n  //   console.log('getSnapshotBeforeUpdate')\n  //   return '快照'\n  // }\n  render () {\n    console.log('A---render  ---import ')\n    //触发，做一次初次渲染\n    return (\n      <div>\n        <p onClick={this.transChange}> 这是父亲的值 {this.state.fatherName} </p>{' '}\n        <B fatherName={this.state.fatherName} />{' '}\n        <button onClick={this.forceChange}> 不更新任何状态下强制更新 </button>{' '}\n      </div>\n    )\n  }\n}\n// 子组件\nclass B extends React.Component {\n  shouldComponentUpdate () {\n    return true //这里默认为true，如果自行修改一定要返回一个boolean值判断是否接着执行\n    // 组件修改\n    console.log('B---shouldComponentUpdate')\n  }\n  componentDidMount () {\n    // 挂载完成\n    console.log('B---componentDidMount  ---import')\n  }\n\n  render () {\n    console.log('B---render')\n    const { fatherName } = this.props\n    return (\n      <div>\n        <p> 这是儿子收到的 {fatherName} </p>{' '}\n      </div>\n    )\n  }\n}\n\nexport default A\n",{"ruleId":"67","severity":1,"message":"68","line":5,"column":3,"nodeType":"69","messageId":"70","endLine":5,"endColumn":9},{"ruleId":"67","severity":1,"message":"71","line":10,"column":10,"nodeType":"69","messageId":"70","endLine":10,"endColumn":18},{"ruleId":"67","severity":1,"message":"72","line":17,"column":10,"nodeType":"69","messageId":"70","endLine":17,"endColumn":16},{"ruleId":"67","severity":1,"message":"73","line":21,"column":8,"nodeType":"69","messageId":"70","endLine":21,"endColumn":11},{"ruleId":"74","severity":1,"message":"75","line":28,"column":1,"nodeType":"76","messageId":"77","endLine":30,"endColumn":2},{"ruleId":"67","severity":1,"message":"78","line":86,"column":5,"nodeType":"69","messageId":"70","endLine":86,"endColumn":9},{"ruleId":"67","severity":1,"message":"79","line":88,"column":7,"nodeType":"69","messageId":"70","endLine":88,"endColumn":15},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"67","severity":1,"message":"84","line":1,"column":8,"nodeType":"69","messageId":"70","endLine":1,"endColumn":13},{"ruleId":"67","severity":1,"message":"85","line":2,"column":8,"nodeType":"69","messageId":"70","endLine":2,"endColumn":12},{"ruleId":"67","severity":1,"message":"86","line":3,"column":8,"nodeType":"69","messageId":"70","endLine":3,"endColumn":16},{"ruleId":"67","severity":1,"message":"87","line":13,"column":13,"nodeType":"69","messageId":"70","endLine":13,"endColumn":16},{"ruleId":"67","severity":1,"message":"88","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":26},{"ruleId":"67","severity":1,"message":"88","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":26},{"ruleId":"67","severity":1,"message":"89","line":2,"column":7,"nodeType":"69","messageId":"70","endLine":2,"endColumn":16},{"ruleId":"67","severity":1,"message":"90","line":38,"column":13,"nodeType":"69","messageId":"70","endLine":38,"endColumn":23},{"ruleId":"91","severity":1,"message":"92","line":103,"column":5,"nodeType":"93","messageId":"94","endLine":103,"endColumn":45},"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'Button' is defined but never used.","'Nav' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'that' is defined but never used.","'ClassCom' is defined but never used.","no-native-reassign",["95"],"no-negated-in-lhs",["96"],"'react' is defined but never used.","'Link' is defined but never used.","'reactDom' is defined but never used.","'age' is assigned a value but never used.","'Component' is defined but never used.","'LifeCycle' is defined but never used.","'fatherName' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","no-global-assign","no-unsafe-negation"]