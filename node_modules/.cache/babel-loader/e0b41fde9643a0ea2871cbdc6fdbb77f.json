{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/privateTest/private/src/pages/message.js\";\nimport React, { Component } from \"react\"; // 函数式组件 -接受传值\n// export default function Message(props){\n//     const {title,content} = props;//父组件传过来的参数\n//     return (\n//        <div>\n//            <h1>{title}:{content}</h1>\n//        </div>\n//     );\n// }\n// 类式组件 -接受传值\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Message extends React.Component {\n  render() {\n    const {\n      title,\n      content,\n      time\n    } = this.props; // 错：pros只读。例this.props.title=\"jhh\";\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [title, \":\", content, \":\", time]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nMessage.propTypes = {\n  //规定props传值要求\n  title: React.propTypes.string.isRequired,\n  content: React.propTypes.string,\n  time: React.propTypes.number\n};\nMessage.defaultProps = {\n  //设置默认props传值\n  time: 2010\n};\nexport default Message; // // (1)函数式组件 (简单组件)\n// function FunCom (){\n//     // 注意这里的this是undefined,因为Babel强制\n//     return <h1>这是函数定义的组件，函数首字母必须大写，因为会去寻找，如果是大写认定为组件，如果是小写认为是html的标签没有找到就会报错</h1>\n// }\n// ReactDom.render(<FunCom/>,document.getElementById(\"??\"))\n// // (2)类式组件（复杂组件：包含状态）\n// class ClassCom extends React.Component{\n//     render(){\n//         //render放在类（ClassCom）的原型对象上,供实例使用\n//         // render的this是ClassCom的实例对象\n//         return <h1>这是类定义的组件，适合用于复杂组件的定义</h1>\n//     }\n// }\n// ReactDOM.render(<ClassCom/>,document.getElementById(\"?\"))","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/message.js"],"names":["React","Component","Message","render","title","content","time","props","propTypes","string","isRequired","number","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IACIC,SADJ,QAEO,OAFP,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AACA,MAAMC,OAAN,SAAsBF,KAAK,CAACC,SAA5B,CAAsC;AAClCE,EAAAA,MAAM,GAAG;AACL,UAAO;AACHC,MAAAA,KADG;AAEHC,MAAAA,OAFG;AAEKC,MAAAA;AAFL,QAGH,KAAKC,KAHT,CADK,CAKL;;AACA,wBACI;AAAA,6BACK;AAAA,mBAAKH,KAAL,OAAaC,OAAb,OAAuBC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAZiC;;AActCJ,OAAO,CAACM,SAAR,GAAoB;AAAC;AACjBJ,EAAAA,KAAK,EAACJ,KAAK,CAACQ,SAAN,CAAgBC,MAAhB,CAAuBC,UADb;AAEhBL,EAAAA,OAAO,EAACL,KAAK,CAACQ,SAAN,CAAgBC,MAFR;AAGhBH,EAAAA,IAAI,EAACN,KAAK,CAACQ,SAAN,CAAgBG;AAHL,CAApB;AAKET,OAAO,CAACU,YAAR,GAAqB;AAAC;AACpBN,EAAAA,IAAI,EAAC;AADc,CAArB;AAGF,eAAeJ,OAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {\n    Component\n} from \"react\";\n\n\n// 函数式组件 -接受传值\n// export default function Message(props){\n//     const {title,content} = props;//父组件传过来的参数\n//     return (\n//        <div>\n//            <h1>{title}:{content}</h1>\n//        </div>\n//     );\n// }\n\n\n// 类式组件 -接受传值\nclass Message extends React.Component {\n    render() {\n        const  {\n            title,\n            content,time\n        } = this.props;\n        // 错：pros只读。例this.props.title=\"jhh\";\n        return (\n            <div>\n                 <h1>{title}:{content}:{time}</h1>\n            </div>\n        )\n    }\n}\nMessage.propTypes = {//规定props传值要求\n    title:React.propTypes.string.isRequired,\n    content:React.propTypes.string,\n    time:React.propTypes.number\n  }\n  Message.defaultProps={//设置默认props传值\n    time:2010\n  }\nexport default Message;\n\n\n// // (1)函数式组件 (简单组件)\n// function FunCom (){\n//     // 注意这里的this是undefined,因为Babel强制\n//     return <h1>这是函数定义的组件，函数首字母必须大写，因为会去寻找，如果是大写认定为组件，如果是小写认为是html的标签没有找到就会报错</h1>\n// }\n// ReactDom.render(<FunCom/>,document.getElementById(\"??\"))\n\n// // (2)类式组件（复杂组件：包含状态）\n// class ClassCom extends React.Component{\n//     render(){\n//         //render放在类（ClassCom）的原型对象上,供实例使用\n//         // render的this是ClassCom的实例对象\n//         return <h1>这是类定义的组件，适合用于复杂组件的定义</h1>\n//     }\n// }\n// ReactDOM.render(<ClassCom/>,document.getElementById(\"?\"))"]},"metadata":{},"sourceType":"module"}