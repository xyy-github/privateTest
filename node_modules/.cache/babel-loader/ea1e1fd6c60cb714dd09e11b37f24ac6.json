{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/privateTest/private/src/pages/message.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types'; // 函数式组件 \n//    --- 接受传值\n//    --- 只能用props\n// export default function Message(props){\n//     const {title,content} = props;//父组件传过来的参数\n//     return (\n//        <div>\n//            <h1>{title}:{content}</h1>\n//        </div>\n//     );\n// }\n// 类式组件 \n//     --- 接受传值\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Message extends React.Component {\n  // 构造器可以省略\n  constructor(props) {\n    console.log(props);\n    super(props);\n  } //规定props传值要求,这里的写法需要先引入npm install --save prop-types和import PropTypes from 'prop-types'\n\n\n  render() {\n    const {\n      title,\n      content,\n      time\n    } = this.props; // pros只读。错例this.props.title=\"jhh\";\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [title, \":\", content, \":\", time]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nMessage.PropTypes = {\n  title: PropTypes.string.isRequired,\n  content: PropTypes.string,\n  time: PropTypes.number\n};\nMessage.defaultProps = {\n  time: 2010\n};\nexport default Message; // // (1)函数式组件 (简单组件)\n// function FunCom (){\n//     // 注意这里的this是undefined,因为Babel强制\n//     return <h1>这是函数定义的组件，函数首字母必须大写，因为会去寻找，如果是大写认定为组件，如果是小写认为是html的标签没有找到就会报错</h1>\n// }\n// ReactDom.render(<FunCom/>,document.getElementById(\"??\"))\n// // (2)类式组件（复杂组件：包含状态）\n// class ClassCom extends React.Component{\n//     render(){\n//         //render放在类（ClassCom）的原型对象上,供实例使用\n//         // render的this是ClassCom的实例对象\n//         return <h1>这是类定义的组件，适合用于复杂组件的定义</h1>\n//     }\n// }\n// ReactDOM.render(<ClassCom/>,document.getElementById(\"?\"))","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/message.js"],"names":["React","Component","PropTypes","Message","constructor","props","console","log","render","title","content","time","string","isRequired","number","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IACIC,SADJ,QAEO,OAFP;AAGA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;AACA,MAAMC,OAAN,SAAsBH,KAAK,CAACC,SAA5B,CAAsC;AAClC;AACAG,EAAAA,WAAW,CAAEC,KAAF,EAAQ;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,UAAMA,KAAN;AACH,GALiC,CAMlC;;;AAWAG,EAAAA,MAAM,GAAG;AACL,UAAO;AACHC,MAAAA,KADG;AAEHC,MAAAA,OAFG;AAEKC,MAAAA;AAFL,QAGH,KAAKN,KAHT,CADK,CAKL;;AACA,wBACI;AAAA,6BACK;AAAA,mBAAKI,KAAL,OAAaC,OAAb,OAAuBC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AA5BiC;;AAAhCR,O,CAOID,S,GAAY;AACdO,EAAAA,KAAK,EAACP,SAAS,CAACU,MAAV,CAAiBC,UADT;AAEdH,EAAAA,OAAO,EAACR,SAAS,CAACU,MAFJ;AAGdD,EAAAA,IAAI,EAACT,SAAS,CAACY;AAHD,C;AAPhBX,O,CAaKY,Y,GAAa;AACnBJ,EAAAA,IAAI,EAAC;AADc,C;AAkBxB,eAAeR,OAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {\n    Component\n} from \"react\";\nimport PropTypes from 'prop-types'\n\n// 函数式组件 \n//    --- 接受传值\n//    --- 只能用props\n// export default function Message(props){\n//     const {title,content} = props;//父组件传过来的参数\n//     return (\n//        <div>\n//            <h1>{title}:{content}</h1>\n//        </div>\n//     );\n// }\n\n\n// 类式组件 \n//     --- 接受传值\nclass Message extends React.Component {\n    // 构造器可以省略\n    constructor (props){\n        console.log(props)\n        super(props)\n    }\n    //规定props传值要求,这里的写法需要先引入npm install --save prop-types和import PropTypes from 'prop-types'\n   static PropTypes = {\n        title:PropTypes.string.isRequired,\n        content:PropTypes.string,\n        time:PropTypes.number\n    }\n    //设置默认props传值\n    static defaultProps={\n     time:2010\n    }\n\n    render() {\n        const  {\n            title,\n            content,time\n        } = this.props;\n        // pros只读。错例this.props.title=\"jhh\";\n        return (\n            <div>\n                 <h1>{title}:{content}:{time}</h1>\n            </div>\n        )\n    }\n}\n\nexport default Message;\n\n\n// // (1)函数式组件 (简单组件)\n// function FunCom (){\n//     // 注意这里的this是undefined,因为Babel强制\n//     return <h1>这是函数定义的组件，函数首字母必须大写，因为会去寻找，如果是大写认定为组件，如果是小写认为是html的标签没有找到就会报错</h1>\n// }\n// ReactDom.render(<FunCom/>,document.getElementById(\"??\"))\n\n// // (2)类式组件（复杂组件：包含状态）\n// class ClassCom extends React.Component{\n//     render(){\n//         //render放在类（ClassCom）的原型对象上,供实例使用\n//         // render的this是ClassCom的实例对象\n//         return <h1>这是类定义的组件，适合用于复杂组件的定义</h1>\n//     }\n// }\n// ReactDOM.render(<ClassCom/>,document.getElementById(\"?\"))"]},"metadata":{},"sourceType":"module"}