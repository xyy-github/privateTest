{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/privateTest/private/src/pages/message.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types'; // 函数式组件\n//    --- 接受传值\n//    --- 只能用props\n// export default function Message(props){\n//     const {title,content} = props;//父组件传过来的参数\n//     return (\n//        <div>\n//            <h1>{title}:{content}</h1>\n//        </div>\n//     );\n// }\n// 类式组件\n//     --- 接受传值\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Message extends React.Component {\n  // 构造器可以省略\n  constructor(props) {\n    console.log(props);\n    super(props);\n  } //规定props传值要求,这里的写法需要先引入npm install --save prop-types和import PropTypes from 'prop-types'\n\n\n  render() {\n    const {\n      title,\n      content,\n      time\n    } = this.props; // pros只读。错例this.props.title=\"jhh\";\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [title, \": \", content, \": \", time, ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nMessage.propTypes = {\n  title: PropTypes.string.isRequired,\n  content: PropTypes.string,\n  time: PropTypes.number\n};\nMessage.defaultProps = {\n  time: 2010\n};\nexport default Message; // // (1)函数式组件 (简单组件)\n// function FunCom (){\n//     // 注意这里的this是undefined,因为Babel强制\n//     return <h1>这是函数定义的组件，函数首字母必须大写，因为会去寻找，如果是大写认定为组件，如果是小写认为是html的标签没有找到就会报错</h1>\n// }\n// ReactDom.render(<FunCom/>,document.getElementById(\"??\"))\n// // (2)类式组件（复杂组件：包含状态）\n// class ClassCom extends React.Component{\n//     render(){\n//         //render放在类（ClassCom）的原型对象上,供实例使用\n//         // render的this是ClassCom的实例对象\n//         return <h1>这是类定义的组件，适合用于复杂组件的定义</h1>\n//     }\n// }\n// ReactDOM.render(<ClassCom/>,document.getElementById(\"?\"))","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/message.js"],"names":["React","Component","PropTypes","Message","constructor","props","console","log","render","title","content","time","propTypes","string","isRequired","number","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AACA,MAAMC,OAAN,SAAsBH,KAAK,CAACC,SAA5B,CAAsC;AACpC;AACAG,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,UAAMA,KAAN;AACD,GALmC,CAMpC;;;AAWAG,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,OAAT;AAAkBC,MAAAA;AAAlB,QAA2B,KAAKN,KAAtC,CADQ,CAER;;AACA,wBACE;AAAA,6BACE;AAAA,mBAEGI,KAFH,QAEYC,OAFZ,QAEuBC,IAFvB,EAE6B,GAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AA5BmC;;AAAhCR,O,CAOGS,S,GAAY;AACjBH,EAAAA,KAAK,EAAEP,SAAS,CAACW,MAAV,CAAiBC,UADP;AAEjBJ,EAAAA,OAAO,EAAER,SAAS,CAACW,MAFF;AAGjBF,EAAAA,IAAI,EAAET,SAAS,CAACa;AAHC,C;AAPfZ,O,CAaGa,Y,GAAe;AACpBL,EAAAA,IAAI,EAAE;AADc,C;AAkBxB,eAAeR,OAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// 函数式组件\n//    --- 接受传值\n//    --- 只能用props\n// export default function Message(props){\n//     const {title,content} = props;//父组件传过来的参数\n//     return (\n//        <div>\n//            <h1>{title}:{content}</h1>\n//        </div>\n//     );\n// }\n\n// 类式组件\n//     --- 接受传值\nclass Message extends React.Component {\n  // 构造器可以省略\n  constructor (props) {\n    console.log(props)\n    super(props)\n  }\n  //规定props传值要求,这里的写法需要先引入npm install --save prop-types和import PropTypes from 'prop-types'\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    content: PropTypes.string,\n    time: PropTypes.number\n  }\n  //设置默认props传值\n  static defaultProps = {\n    time: 2010\n  }\n\n  render () {\n    const { title, content, time } = this.props\n    // pros只读。错例this.props.title=\"jhh\";\n    return (\n      <div>\n        <h1>\n          \n          {title}: {content}: {time}{' '}\n        </h1>\n      </div>\n    )\n  }\n}\n\nexport default Message\n\n// // (1)函数式组件 (简单组件)\n// function FunCom (){\n//     // 注意这里的this是undefined,因为Babel强制\n//     return <h1>这是函数定义的组件，函数首字母必须大写，因为会去寻找，如果是大写认定为组件，如果是小写认为是html的标签没有找到就会报错</h1>\n// }\n// ReactDom.render(<FunCom/>,document.getElementById(\"??\"))\n\n// // (2)类式组件（复杂组件：包含状态）\n// class ClassCom extends React.Component{\n//     render(){\n//         //render放在类（ClassCom）的原型对象上,供实例使用\n//         // render的this是ClassCom的实例对象\n//         return <h1>这是类定义的组件，适合用于复杂组件的定义</h1>\n//     }\n// }\n// ReactDOM.render(<ClassCom/>,document.getElementById(\"?\"))\n"]},"metadata":{},"sourceType":"module"}