{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/privateTest/private/src/pages/message.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types'; // 函数式组件 -接受传值\n// export default function Message(props){\n//     const {title,content} = props;//父组件传过来的参数\n//     return (\n//        <div>\n//            <h1>{title}:{content}</h1>\n//        </div>\n//     );\n// }\n// 类式组件 -接受传值\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Message extends React.Component {\n  //规定props传值要求\n  //设置默认props传值\n  render() {\n    const {\n      title,\n      content,\n      time\n    } = this.props; // 错：pros只读。例this.props.title=\"jhh\";\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", title, \": \", content, \": \", time, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 18\n    }, this);\n  }\n\n}\n\nMessage.propTypes = {\n  title: PropTypes.string.isRequired,\n  content: PropTypes.string,\n  time: PropTypes.number\n};\nMessage.defaultProps = {\n  time: 2010\n};\nexport default Message; // // (1)函数式组件 (简单组件)\n// function FunCom (){\n//     // 注意这里的this是undefined,因为Babel强制\n//     return <h1>这是函数定义的组件，函数首字母必须大写，因为会去寻找，如果是大写认定为组件，如果是小写认为是html的标签没有找到就会报错</h1>\n// }\n// ReactDom.render(<FunCom/>,document.getElementById(\"??\"))\n// // (2)类式组件（复杂组件：包含状态）\n// class ClassCom extends React.Component{\n//     render(){\n//         //render放在类（ClassCom）的原型对象上,供实例使用\n//         // render的this是ClassCom的实例对象\n//         return <h1>这是类定义的组件，适合用于复杂组件的定义</h1>\n//     }\n// }\n// ReactDOM.render(<ClassCom/>,document.getElementById(\"?\"))","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/privateTest/private/src/pages/message.js"],"names":["React","Component","PropTypes","Message","render","title","content","time","props","propTypes","string","isRequired","number","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IACIC,SADJ,QAEO,OAFP;AAGA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AACA,MAAMC,OAAN,SAAsBH,KAAK,CAACC,SAA5B,CAAsC;AAClC;AAMA;AAIAG,EAAAA,MAAM,GAAG;AACL,UAAM;AACFC,MAAAA,KADE;AAEFC,MAAAA,OAFE;AAGFC,MAAAA;AAHE,QAIF,KAAKC,KAJT,CADK,CAML;;AACA,wBAAS;AAAA,8BAEL;AAAA,wBAEIH,KAFJ,QAIIC,OAJJ,QAMIC,IANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFK;AAAA;AAAA;AAAA;AAAA;AAAA,YAAT;AAYH;;AA9BiC;;AAAhCJ,O,CAEKM,S,GAAY;AACfJ,EAAAA,KAAK,EAAEH,SAAS,CAACQ,MAAV,CAAiBC,UADT;AAEfL,EAAAA,OAAO,EAAEJ,SAAS,CAACQ,MAFJ;AAGfH,EAAAA,IAAI,EAAEL,SAAS,CAACU;AAHD,C;AAFjBT,O,CAQKU,Y,GAAe;AAClBN,EAAAA,IAAI,EAAE;AADY,C;AAyB1B,eAAeJ,OAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {\n    Component\n} from \"react\";\nimport PropTypes from 'prop-types'\n\n// 函数式组件 -接受传值\n// export default function Message(props){\n//     const {title,content} = props;//父组件传过来的参数\n//     return (\n//        <div>\n//            <h1>{title}:{content}</h1>\n//        </div>\n//     );\n// }\n\n\n// 类式组件 -接受传值\nclass Message extends React.Component {\n    //规定props传值要求\n    static propTypes = {\n        title: PropTypes.string.isRequired,\n        content: PropTypes.string,\n        time: PropTypes.number\n    }\n    //设置默认props传值\n    static defaultProps = {\n        time: 2010\n    }\n    render() {\n        const {\n            title,\n            content,\n            time\n        } = this.props;\n        // 错：pros只读。例this.props.title=\"jhh\";\n        return ( <\n            div >\n            <\n            h1 > {\n                title\n            }: {\n                content\n            }: {\n                time\n            } < /h1> <\n            /div>\n        )\n    }\n}\n\nexport default Message;\n\n\n// // (1)函数式组件 (简单组件)\n// function FunCom (){\n//     // 注意这里的this是undefined,因为Babel强制\n//     return <h1>这是函数定义的组件，函数首字母必须大写，因为会去寻找，如果是大写认定为组件，如果是小写认为是html的标签没有找到就会报错</h1>\n// }\n// ReactDom.render(<FunCom/>,document.getElementById(\"??\"))\n\n// // (2)类式组件（复杂组件：包含状态）\n// class ClassCom extends React.Component{\n//     render(){\n//         //render放在类（ClassCom）的原型对象上,供实例使用\n//         // render的this是ClassCom的实例对象\n//         return <h1>这是类定义的组件，适合用于复杂组件的定义</h1>\n//     }\n// }\n// ReactDOM.render(<ClassCom/>,document.getElementById(\"?\"))"]},"metadata":{},"sourceType":"module"}